Update Raspberry Pi 500 and CM4 to python 3.13
https://chatgpt.com/share/680e6b8a-8ff8-8000-8cf8-d0e9c164d093


Update Pyright .zed/settings.json to ignore certain errors like unbound modules


(.venvDMuffler) ï£¿ ~/GitRepos/DMuffler/ [main*] p3 EngineSoundPitchShifter.py
/Users/earth/GitRepos/DMuffler/EngineSoundPitchShifter.py:89: UserWarning: PySoundFile failed. Trying audioread instead.
  self.audioTimeSeries, self.sampleRate = librosa.load(self.audioFile)
/Users/earth/GitRepos/DMuffler/.venvDMuffler/lib/python3.13/site-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load
	Deprecated as of librosa version 0.10.0.
	It will be removed in librosa version 1.0.
  y, sr_native = __audioread_load(path, offset, duration, dtype)


Following code needs to be added to EngineSoundPitchShifter.py little by little after understanding it:
class KeyboardAudioPitchShifter:
    def __init__(self):
        # Load audio file
        self.audio_file = "input.wav"  # Change this to your audio file
        self.y, self.sr = librosa.load(self.audio_file)

        # Initialize playback variables
        self.playing = False
        self.current_frame = 0
        self.pitch_factor = 1.0
        self.running = True

        # Setup audio stream
        self.stream = sd.OutputStream(
            channels=1,
            samplerate=self.sr,
            callback=self.audio_callback
        )

        # Start the stream
        self.stream.start()

    def audio_callback(self, outdata, frames, time, status):              What do time & status do?
        if self.playing and self.current_frame < len(self.y):
            # Get chunk of audio
            chunk = self.y[self.current_frame:self.current_frame + frames]

            # Apply pitch shift
            if len(chunk) > 0:
                shifted = librosa.effects.pitch_shift(
                    chunk,
                    sr=self.sr,
                    n_steps=12 * np.log2(self.pitch_factor)
                )

                # Ensure the output array is the right size
                if len(shifted) < frames:
                    shifted = np.pad(shifted, (0, frames - len(shifted)))

                outdata[:] = shifted.reshape(-1, 1)
                self.current_frame += frames
            else:
                outdata.fill(0)
        else:
            outdata.fill(0)

    def on_press(self, key):
        try:
            # Space bar controls playback
            if key == keyboard.Key.space:
                self.playing = not self.playing
                print(f"Playback: {'Playing' if self.playing else 'Paused'}")

            # Up arrow increases pitch
            elif key == keyboard.Key.up:
                self.pitch_factor = min(2.0, self.pitch_factor + 0.1)
                print(f"Pitch factor: {self.pitch_factor:.1f}")

            # Down arrow decreases pitch
            elif key == keyboard.Key.down:
                self.pitch_factor = max(0.5, self.pitch_factor - 0.1)
                print(f"Pitch factor: {self.pitch_factor:.1f}")

            # R key resets playback
            elif hasattr(key, 'char') and key.char == 'r':
                self.current_frame = 0
                print("Playback reset")

            # ESC key exits
            elif key == keyboard.Key.esc:
                self.running = False
                return False

        except AttributeError:
            pass

    def handle_input(self):
        # Start keyboard listener
        with keyboard.Listener(on_press=self.on_press) as listener:
            listener.join()

    def check_gas_pedal(self):
        while self.running:
            # Simulate gas pedal with W key
            if pyautogui.keyIsDown('w'):
                # Gradually increase pitch while W is held
                self.pitch_factor = min(2.0, self.pitch_factor + 0.02)
            else:
                # Gradually return to normal pitch when W is released
                if self.pitch_factor > 1.0:
                    self.pitch_factor = max(1.0, self.pitch_factor - 0.02)

            time.sleep(0.01)  # Small delay to prevent excessive CPU usage

    def run(self):
        print("Controls:")
        print("Space: Play/Pause")
        print("Up/Down arrows: Adjust pitch")
        print("R: Reset playback")
        print("W: Gas pedal (hold to increase pitch)")
        print("ESC: Exit")

        # Start input handling in separate threads
        input_thread = threading.Thread(target=self.handle_input)
        gas_pedal_thread = threading.Thread(target=self.check_gas_pedal)

        input_thread.start()
        gas_pedal_thread.start()

        # Wait for threads to finish
        input_thread.join()
        self.running = False
        gas_pedal_thread.join()

    def cleanup(self):
        self.stream.stop()
        self.stream.close()

# Create and run the application
if __name__ == "__main__":
    app = KeyboardAudioPitchShifter()
    try:
        app.run()
    finally:
        app.cleanup()
```

To use this version:

1. Install the required packages:
```bash
pip install numpy sounddevice librosa pyautogui pynput
```

2. Save your audio file (WAV or MP3) in the same directory as the script and update the `audio_file` variable with your filename.

3. Run the script and use the following controls:
- Space bar: Play/Pause
- W key: Hold as gas pedal (gradually increases pitch)
- Up/Down arrows: Manual pitch adjustment
- R: Reset playback
- ESC: Exit the program

This version features:
- Smooth "gas pedal" behavior using the W key
- Gradual pitch increase while W is held
- Automatic return to normal pitch when W is released
- Additional manual controls with arrow keys
- Clean exit with ESC key
- Status messages in the console
- Real-time pitch shifting

The main differences from the previous version are:
1. Uses PyAutoGUI for continuous key state checking (gas pedal)
2. Uses pynput for discrete key press events
3. Adds a more realistic gas pedal behavior with gradual changes
4. Includes status messages for better feedback
5. Adds a clean exit option

Note that PyAutoGUI's key detection might behave differently on different operating systems. If you experience any issues, you might need to adjust the key checking delay or use alternative methods for your specific OS.
